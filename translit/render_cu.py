#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
Script that renders a church-slavonic text in a way that it can be displayed
nicely with the "Triodion" font (and maybe other c-s. fonts as well).
This implementation is based on the HIP standard (http://orthlib.ru/hip/).

Usage: ./render_cu.py <file>  (to use text file as input)
       ./render_cu.py -       (to use standard input)
"""

from __future__ import unicode_literals

import sys

pairs = [
    (r"%<",     "<em>"),
    (r"%>",     "</em>"),
    (r"%[",     "<strong>"),
    (r"%]",     "</strong>"),
    (r"%<<",    "<span>"),
    (r"%>>",    "</span>"),

    (r"-",      "-"), # дефис
    #  <?>            # вопросительный знак обычного вида (в том числе в режиме <::слав> )
    (r"'",      "1"), # острое ( /-образное ) ударение (акут)
    (r"`",      "2"), # тяжелое ( \-образное ) ударение (гравис)
    #  ''             # //-образный надстрочный знак
    #  ``             # \\-образный надстрочный знак
    (r"^",      "6"), # облеченное ударение (циркумфлекс)
    #  "              # два надстрочных штриха, наклон которых неважен или определен контекстом
    (r"<((>",   "«"), # <<-образная или ((-образная (в греческом режиме) кавычка
    (r"<))>",   "»"), # >>-образная или ))-образная (в греческом режиме) кавычка
    #  \.             # точка над буквой
    #  \:             # две точки над буквой ( Ё = Е\: )
    (r"\"",     "°"), # U-образный надстрочный знак, обычно символ краткости ( Й = И\@ )
    (r"<.>",    "·"), # точка на средней линии строки
    #  \-             # черта над буквой (в режиме <::слав> -- знак "покрытие")
    #  |.             # точка под буквой
    #  |-             # черта под буквой
    #  |о             # кружок под буквой

    (r"а",      "а"), # + АЗ
    (r"А",      "А"),
    (r"а=",     "ґ"), # +
    (r"А=",     "Ґ"),
    (r"а='",    "ѓ"), # +
    (r"А='",    "Ѓ"),
    (r"а^",     "†"),
    (r"а~",     "№"),
    (r"б",      "б"), # + БУКИ
    (r"Б",      "Б"),
    (r"в",      "в"), # + ВЕДИ
    (r"В",      "В"),
    (r"г",      "г"), # + ГЛАГОЛЬ
    (r"Г",      "Г"),
    (r"г~",     "G"),
    (r"д",      "д"), # + ДОБРО
    (r"Д",      "Д"),
    (r"е",      "е"), # + ЕСТЬ
    (r"Е",      "Е"),
    (r"е'",     "E"),
    (r"_е",     "є"), # ЕСТЬ ("широкое" или "длинное" начертание)
    (r"<е>",    "є"), # ЕСТЬ ("широкое" или "длинное" начертание)
    (r"_Е",     "Е"),
    (r"<Е>",    "Е"),
    (r"jь",     "э"), # + ЯТЬ
    (r"JЬ",     "Э"),
    (r"jь'",    "ё"),
    (r"jь`",    "Ё"),
    (r"jь^",    "B"),
    (r"ж",      "ж"), # + ЖИВЕТЕ
    (r"Ж",      "Ж"),
    (r"ж~",     "9"),
    (r"s",      "ѕ"), # + ЗЕЛО
    (r"S",      "Ѕ"),
    (r"з",      "з"), # + ЗЕМЛЯ
    (r"З",      "З"),
    (r"и",      "и"), # + ИЖЕ ("И" 8-РИЧНОЕ)
    (r"И",      "И"),
    (r"и~",     "}"),
    (r"i",      "і"), # + "И" 10-РИЧНОЕ (по умолчанию с 2 точками, см. п. I.13)
    (r"I",      "І"),
    (r"i'",     "j"),
    (r"i`",     "J"),
    (r"i^",     "‡"),
    (r"i=",     "ї"), # +
    (r"I=",     "Ї"),
    (r"i='",    "ј"), # +
    (r"I='",    "Ј"),
    (r"_i",     "i"), # + (i без точек)
    (r"_I",     "I"),
    (r"<i>",    "i"), # + (i без точек)
    (r"<I>",    "I"),
    (r"v",      "v"), # + ИЖИЦА (без надстрочников)
    (r"V",      "V"),
    (r"v'",     "Ђ"),
    (r"v\"",    "m"), # +
    (r"V\"",    "M"),
    (r"v^",     "›"),
    (r"v\г",    "ђ"),
    (r"й",      "й"), # + ИЖЕ КРАТКОЕ
    (r"Й",      "Й"),
    (r"_i",     "i"), # + (i без точек)
    (r"_I",     "I"),

    (r"к",      "к"), # + КАКО
    (r"К",      "К"),
    (r"_кс",    "x"), # + КСИ
    (r"_КС",    "X"),
    (r"_кс~",   "…"),
    (r"<кс>",   "x"), # + КСИ
    (r"<КС>",   "X"),
    (r"<кс>~",  "…"),
    (r"л",      "л"), # + ЛЮДИ
    (r"Л",      "Л"),
    (r"л~",     "l"),
    (r"л\д",    "L"),
    (r"м",      "м"), # + МЫСЛЕТЕ
    (r"М",      "М"),
    (r"н",      "н"), # + НАШ
    (r"Н",      "Н"),
    (r"о",      "о"), # + ОН
    (r"О",      "О"),
    (r"о'",     "0"),
    (r"_о",     "o"), # + ОН (широкое начертание)
    (r"_О",     "O"),
    (r"_о=",    "n"), # +
    (r"_О=",    "N"),
    (r"_о='",   "џ"), # +
    (r"_О='",   "Џ"),
    (r"<о>",    "o"), # + ОН (широкое начертание)
    (r"<О>",    "O"),
    (r"<о>=",   "n"), # +
    (r"<О>=",   "N"),
    (r"<о>='",  "џ"), # +
    (r"<О>='",  "Џ"),
    (r"w",      "w"), # + ОМЕГА
    (r"W",      "W"),
    (r"w'",     "H"),
    (r"w=",     "њ"), # +
    (r"W=",     "Њ"),
    (r"_w",     "q"), # + ОМЕГА ШИРОКАЯ (по умолчанию с великим апострофом, см. п. I.13)
    (r"_W",     "Q"),
    (r"<w>",    "q"), # + ОМЕГА ШИРОКАЯ (по умолчанию с великим апострофом, см. п. I.13)
    (r"<W>",    "Q"),
    (r"w\т",    "t"), # ОТ
    (r"w\т~",   "t\\"),
    (r"W\т",    "T"),
    (r"п",      "п"), # + ПОКОЙ
    (r"П",      "П"),
    (r"_пс",    "p"), # + ПСИ
    (r"_ПС",    "P"),
    (r"_пс~",   "p\\"),
    (r"<пс>",   "p"), # + ПСИ
    (r"<ПС>",   "P"),
    (r"<пс>~",  "p\\"),
    (r"р",      "р"), # + РЦЫ
    (r"Р",      "Р"),
    (r"р~",     "R"),
    (r"р\д",    "®"),
    (r"р\с",    "r"),
    (r"с",      "с"), # + СЛОВО
    (r"С",      "С"),
    (r"с~",     "©"),
    (r"т",      "т"), # + ТВЕРДО
    (r"Т",      "Т"),
    (r"у",      "у"), # + УК (гаммаобразное)
    (r"У",      "У"),
    (r"у'",     "y"),
    (r"у^",     "{"),
    (r"у`",     "Y"),
    (r"_у",     "µ"), # ИК (числовой знак 400 или компонент диграфа о<у> )
    (r"<у>",    "µ"), # ИК (числовой знак 400 или компонент диграфа о<у> )
    (r"о_у",    "s"), # УК (начертание оу), он же ОНИК
    (r"о_у=",   "ў"),
    (r"о_у='",  "ќ"),
    (r"О_У",    "S"),
    (r"О_У=",   "Ў"),
    (r"О_У='",  "Ќ"),
    (r"о<у>",   "s"), # УК (начертание оу), он же ОНИК
    (r"о<у>=",  "ў"),
    (r"о<у>='", "ќ"),
    (r"О<У>",   "S"),
    (r"О<У>=",  "Ў"),
    (r"О<У>='", "Ќ"),
    (r"ф",      "ф"), # + ФЕРТ
    (r"Ф",      "Ф"),
    (r"ф~",     "ф&"),
    (r"f",      "f"), # + ФИТА
    (r"F",      "F"),
    (r"х",      "х"), # + ХЕР
    (r"Х",      "Х"),
    (r"х~",     "¦"),
    (r"ц",      "ц"), # + ЦЫ
    (r"Ц",      "Ц"),
    (r"ч",      "ч"), # + ЧЕРВЬ
    (r"Ч",      "Ч"),
    (r"ч~",     "§"),
    (r"ш",      "ш"), # + ША
    (r"Ш",      "Ш"),
    (r"щ",      "щ"), # + ЩА
    (r"Щ",      "Щ"),
    (r"ъ",      "ъ"), # + ЕР
    (r"Ъ",      "Ъ"),
    (r"ы",      "ы"), # + ЕРЫ (в обычном виде ЬI)
    (r"Ы",      "Ы"),
    (r"ы'",     "h"),
    (r"ь",      "ь"), # + ЕРЬ
    (r"Ь",      "Ь"),
    (r"ю",      "ю"), # + Ю
    (r"Ю",      "Ю"),
    (r"jа",     "я"), # Я (в виде "лигатуры" IА )
    (r"ja^",    "‰"),
    (r"ja=",    "k"),
    (r"ja='",   "ћ"),
    (r"ja=`",   "±"),
    (r"Jа",     "Я"),
    (r"Jа^",    "Љ"),
    (r"Ja=",    "K"),
    (r"Ja='",   "Ћ"),
    (r"я",      "z"), # + ЮС МАЛЫЙ
    (r"Я",      "Z"),
    (r"я'",     "s"),
    (r"я`",     "S"),
    (r"я=",     "љ"), # +
    (r"Я=",     "Љ"),
    (r"я=`",    "|"),


    (r"=",      "3"), # тонкое придыхание
    (r"='",     "4"), # тонк. прид. + острое ударение
    #  =^             # тонк. прид. + облеченное ударение (знак "великий апостроф")
    (r"=`",     "5"), # тонк. прид. + тяжелое ударение
    (r"\"",     "*"), # два штриха \\ над буквой (особ. над ижицей), не обозначающие выносного И или Й **invalid**
    (r"~",      "7"), # простое титло

    (r"#",      "¤"), # числовой знак для тысяч
    (r"*",      "*"), # звездочка (светлая, в виде верхнего индекса)

    # буквенные титла. В более древних текстах их было больше;
    # из данного списка некоторые употребительны только
    # в ограниченном контексте: \т в составе буквы w\т,
    # \в, \х, \ч -- только в сокращениях слов "глава", "стих" и "зачало"
    (r"\в",     "*"), # **invalid**
    (r"\г",     "g"),
    (r"\д",     "d"),
    (r"\о",     "b"),
    (r"\р",     "&gt;"),
    (r"\с",     "c"),
    (r"\т",     "*"), # **invalid**
    (r"\х",     "&lt;"),
    (r"\ч",     "?"),

    (r"\ъ",     "8"), # паерок

    (r":",      ":"),
    (r",",      ","),
    (r".",      "."),
    (r"(",      "("),
    (r")",      ")"),
    (r"[",      "["),
    (r"]",      "]"),
    (r"!",      "!"),
    (r"/",      "/"),

    (r"0",      "⓪"),
    (r"1",      "①"),
    (r"2",      "②"),
    (r"3",      "③"),
    (r"4",      "④"),
    (r"5",      "⑤"),
    (r"6",      "⑥"),
    (r"7",      "⑦"),
    (r"8",      "⑧"),
    (r"9",      "⑨"),
]

pairs = dict(pairs)
max_pattern_len = max(len(k) for k in pairs)

def render(string):
    result = ""
    last_char_was_upper = False

    while string:
        stopped = False
        for j in range(max_pattern_len, 0, -1): # trying longer matches first
            if string[:j] in pairs:
                replacement = pairs[string[:j]]
                # a hack to fit accents over uppercase letters
                if last_char_was_upper:
                    if   replacement == "1": replacement = "~"
                    elif replacement == "2": replacement = "@"
                    elif replacement == "3": replacement = "#"
                    elif replacement == "4": replacement = "$"
                    elif replacement == "5": replacement = "%"
                    elif replacement == "6": replacement = "^"
                    elif replacement == "7": replacement = "&"
                    elif replacement == "8": replacement = "_"
                result += replacement
                last_char_was_upper = string[:j].isupper()
                string = string[j:]
                stopped = True
                break
        if not stopped:
            if string[:1] in [" ", "\n", "\r", "\t"]:
                result += string[:1]
            else:
                result += "⍰"
            last_char_was_upper = string[:1].isupper()
            string = string[1:]

    return result

if __name__ == '__main__':
    try:
        [filename] = sys.argv[1:]
        if filename == '-':
            inputFile = sys.stdin
        else:
            inputFile = open(filename)
    except ValueError:
        print __doc__
        print "Strings replaced (in random order):"
        for (a, b) in pairs.items():
            print ("%20s → %s" % (a, b)).encode('utf-8')
        sys.exit()
    for line in inputFile:
        line = line.decode('utf-8')
        line = render(line)
        print line[:-1].encode('utf-8') # omitting '\n'
    inputFile.close()
